import { useState, useEffect } from 'react';
import { getAllInquiries, updateInquiryStatus, deleteInquiry } from '../../services/api';
import './AdminInquiries.css';

function AdminInquiries() {
  const [inquiries, setInquiries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('pending');
  const [selectedInquiry, setSelectedInquiry] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [adminResponse, setAdminResponse] = useState('');
  const [updating, setUpdating] = useState(false);

  useEffect(() => {
    fetchInquiries();
  }, [filter]);

  const fetchInquiries = async () => {
    try {
      setLoading(true);
      console.log('🔄 CONSULTAS: Cargando consultas con filtro:', filter);
      
      const response = await getAllInquiries({ 
        status: filter === 'all' ? undefined : filter,
        limit: 50 
      });
      
      console.log('✅ CONSULTAS: Datos recibidos:', response);
      
      if (response.success) {
        setInquiries(response.data || []);
        setError(null);
      } else {
        setError(response.message || 'Error cargando consultas');
      }
    } catch (error) {
      console.error('❌ CONSULTAS: Error:', error);
      setError('Error cargando consultas');
    } finally {
      setLoading(false);
    }
  };

  const handleStatusUpdate = async (inquiryId, status) => {
    try {
      setUpdating(true);
      console.log(`🔄 CONSULTAS: Actualizando consulta ${inquiryId} a ${status}`);
      
      const response = await updateInquiryStatus(inquiryId, status, adminResponse);
      
      if (response.success) {
        console.log('✅ CONSULTAS: Estado actualizado exitosamente');
        // Actualizar la lista de consultas
        await fetchInquiries();
        // Cerrar modal
        setShowDetailsModal(false);
        setSelectedInquiry(null);
        setAdminResponse('');
        alert(`Consulta ${status === 'approved' ? 'aprobada' : 'rechazada'} exitosamente. Se ha enviado un email al cliente.`);
      } else {
        alert('Error actualizando consulta: ' + response.message);
      }
    } catch (error) {
      console.error('❌ CONSULTAS: Error actualizando:', error);
      alert('Error actualizando consulta');
    } finally {
      setUpdating(false);
    }
  };

  const handleDeleteInquiry = async (inquiryId) => {
    if (!window.confirm('¿Estás seguro de que quieres eliminar esta consulta? Esta acción no se puede deshacer.')) {
      return;
    }

    try {
      setUpdating(true);
      console.log(`🗑️ CONSULTAS: Eliminando consulta ${inquiryId}`);
      
      const response = await deleteInquiry(inquiryId);
      
      if (response.success) {
        console.log('✅ CONSULTAS: Consulta eliminada exitosamente');
        // Actualizar la lista de consultas
        await fetchInquiries();
        // Cerrar modal si está abierto
        setShowDetailsModal(false);
        setSelectedInquiry(null);
        alert('Consulta eliminada exitosamente.');
      } else {
        alert('Error eliminando consulta: ' + response.message);
      }
    } catch (error) {
      console.error('❌ CONSULTAS: Error eliminando:', error);
      alert('Error eliminando consulta');
    } finally {
      setUpdating(false);
    }
  };

  const openDetails = (inquiry) => {
    setSelectedInquiry(inquiry);
    setAdminResponse('');
    setShowDetailsModal(true);
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      pending: { label: 'Pendiente', className: 'status-pending' },
      approved: { label: 'Aprobada', className: 'status-approved' },
      rejected: { label: 'Rechazada', className: 'status-rejected' }
    };
    
    const config = statusConfig[status] || { label: status, className: 'status-unknown' };
    return <span className={`status-badge ${config.className}`}>{config.label}</span>;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('es-ES', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  if (loading) {
    return (
      <div className="admin-inquiries">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Cargando consultas...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-inquiries">
      <div className="inquiries-header">
        <h2>📋 Gestión de Consultas</h2>
        <div className="inquiries-filters">
          <button 
            className={filter === 'pending' ? 'filter-active' : 'filter-button'}
            onClick={() => setFilter('pending')}
          >
            Pendientes ({inquiries.filter(i => i.status === 'pending').length})
          </button>
          <button 
            className={filter === 'approved' ? 'filter-active' : 'filter-button'}
            onClick={() => setFilter('approved')}
          >
            Aprobadas
          </button>
          <button 
            className={filter === 'rejected' ? 'filter-active' : 'filter-button'}
            onClick={() => setFilter('rejected')}
          >
            Rechazadas
          </button>
          <button 
            className={filter === 'all' ? 'filter-active' : 'filter-button'}
            onClick={() => setFilter('all')}
          >
            Todas
          </button>
        </div>
      </div>

      {error && (
        <div className="error-message">
          <p>❌ {error}</p>
        </div>
      )}

      <div className="inquiries-list">
        {inquiries.length === 0 ? (
          <div className="no-inquiries">
            <p>📝 No hay consultas {filter !== 'all' ? `con estado "${filter}"` : ''}</p>
          </div>
        ) : (
          <div className="inquiries-table">
            <div className="table-header">
              <div>Fecha</div>
              <div>Cliente</div>
              <div>Propiedad</div>
              <div>Check-in/out</div>
              <div>Pax</div>
              <div>Precio</div>
              <div>Estado</div>
              <div>Acciones</div>
            </div>
            
            {inquiries.map((inquiry) => (
              <div key={inquiry._id} className="table-row">
                <div>{new Date(inquiry.createdAt).toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', hour: '2-digit', minute: '2-digit' })}</div>
                <div>
                  <strong>{inquiry.guestName}</strong>
                  <br />
                  <small>📧 {inquiry.guestEmail}</small>
                  {inquiry.guestPhone && <><br /><small>📞 {inquiry.guestPhone}</small></>}
                  {inquiry.guestDni && <><br /><small>🆔 DNI: {inquiry.guestDni}</small></>}
                </div>
                <div>{inquiry.propertyTitle}</div>
                <div>
                  <small>In: {new Date(inquiry.checkIn).toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' })}</small><br />
                  <small>Out: {new Date(inquiry.checkOut).toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' })}</small>
                </div>
                <div>{inquiry.guests}</div>
                <div>{formatCurrency(inquiry.totalPrice)}</div>
                <div>{getStatusBadge(inquiry.status)}</div>
                <div>
                  <button 
                    className="details-button"
                    onClick={() => openDetails(inquiry)}
                  >
                    Ver Detalles
                  </button>
                  <button 
                    className="delete-button"
                    onClick={() => handleDeleteInquiry(inquiry._id)}
                    title="Eliminar consulta"
                  >
                    🗑️
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modal de detalles */}
      {showDetailsModal && selectedInquiry && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>📋 Detalles de la Consulta</h3>
              <button 
                className="close-button"
                onClick={() => setShowDetailsModal(false)}
              >
                ✕
              </button>
            </div>
            
            <div className="modal-body">
              <div className="inquiry-details">
                <div className="detail-section">
                  <h4>👤 Información del Cliente</h4>
                  <p><strong>Nombre:</strong> {selectedInquiry.guestName}</p>
                  <p><strong>Email:</strong> {selectedInquiry.guestEmail}</p>
                  {selectedInquiry.guestPhone && <p><strong>Teléfono:</strong> {selectedInquiry.guestPhone}</p>}
                  {selectedInquiry.guestDni && <p><strong>DNI:</strong> {selectedInquiry.guestDni}</p>}
                </div>

                <div className="detail-section">
                  <h4>🏠 Información de la Reserva</h4>
                  <p><strong>Propiedad:</strong> {selectedInquiry.propertyTitle}</p>
                  <p><strong>Check-in:</strong> {formatDate(selectedInquiry.checkIn)}</p>
                  <p><strong>Check-out:</strong> {formatDate(selectedInquiry.checkOut)}</p>
                  <p><strong>Huéspedes:</strong> {selectedInquiry.guests}</p>
                  <p><strong>Precio Total:</strong> {formatCurrency(selectedInquiry.totalPrice)}</p>
                </div>

                {selectedInquiry.customMessage && (
                  <div className="detail-section">
                    <h4>💬 Mensaje del Cliente</h4>
                    <p className="custom-message">{selectedInquiry.customMessage}</p>
                  </div>
                )}

                <div className="detail-section">
                  <h4>ℹ️ Estado de la Consulta</h4>
                  <p><strong>Estado Actual:</strong> {getStatusBadge(selectedInquiry.status)}</p>
                  <p><strong>Creada:</strong> {formatDate(selectedInquiry.createdAt)}</p>
                  {selectedInquiry.updatedAt !== selectedInquiry.createdAt && (
                    <p><strong>Actualizada:</strong> {formatDate(selectedInquiry.updatedAt)}</p>
                  )}
                </div>

                {selectedInquiry.status === 'pending' && (
                  <div className="detail-section">
                    <h4>✍️ Respuesta del Administrador</h4>
                    <textarea
                      value={adminResponse}
                      onChange={(e) => setAdminResponse(e.target.value)}
                      placeholder="Escribe una respuesta personalizada para el cliente (opcional)..."
                      rows="4"
                      className="admin-response-textarea"
                    />
                  </div>
                )}
              </div>
            </div>

            {selectedInquiry.status === 'pending' && (
              <div className="modal-footer">
                <button 
                  className="approve-button"
                  onClick={() => handleStatusUpdate(selectedInquiry._id, 'approved')}
                  disabled={updating}
                >
                  {updating ? '⏳ Procesando...' : '✅ Aprobar Consulta'}
                </button>
                <button 
                  className="reject-button"
                  onClick={() => handleStatusUpdate(selectedInquiry._id, 'rejected')}
                  disabled={updating}
                >
                  {updating ? '⏳ Procesando...' : '❌ Rechazar Consulta'}
                </button>
                <button 
                  className="delete-button-modal"
                  onClick={() => handleDeleteInquiry(selectedInquiry._id)}
                  disabled={updating}
                >
                  {updating ? '⏳ Procesando...' : '🗑️ Eliminar Consulta'}
                </button>
                <button 
                  className="cancel-button"
                  onClick={() => setShowDetailsModal(false)}
                  disabled={updating}
                >
                  Cancelar
                </button>
              </div>
            )}

            {selectedInquiry.status !== 'pending' && (
              <div className="modal-footer">
                <button 
                  className="delete-button-modal"
                  onClick={() => handleDeleteInquiry(selectedInquiry._id)}
                  disabled={updating}
                >
                  {updating ? '⏳ Procesando...' : '🗑️ Eliminar Consulta'}
                </button>
                <button 
                  className="cancel-button"
                  onClick={() => setShowDetailsModal(false)}
                  disabled={updating}
                >
                  Cerrar
                </button>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

export default AdminInquiries;
