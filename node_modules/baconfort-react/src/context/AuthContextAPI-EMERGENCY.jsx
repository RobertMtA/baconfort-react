// VERSI√ìN DE EMERGENCIA PARA ACCESO ADMINISTRATIVO TEMPORAL
import { createContext, useContext, useState, useEffect } from 'react';
import api from '../services/api';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe ser usado dentro de un AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Restaurar sesi√≥n desde localStorage al cargar
  useEffect(() => {
    const restoreSession = () => {
      try {
        const savedUser = localStorage.getItem('baconfort-user');
        const savedToken = localStorage.getItem('baconfort-token');
        
        if (savedUser && savedToken) {
          const parsedUser = JSON.parse(savedUser);
          console.log('üîÑ AUTH EMERGENCY: Restaurando sesi√≥n:', parsedUser.email);
          setUser(parsedUser);
        } else {
          console.log('üì≠ AUTH EMERGENCY: No hay sesi√≥n guardada');
        }
      } catch (error) {
        console.error('‚ùå AUTH EMERGENCY: Error restaurando sesi√≥n:', error);
        localStorage.removeItem('baconfort-user');
        localStorage.removeItem('baconfort-token');
      } finally {
        setLoading(false);
      }
    };

    restoreSession();
  }, []);

  // Funci√≥n para persistir sesi√≥n
  const persistSession = (userData, token = null) => {
    try {
      localStorage.setItem('baconfort-user', JSON.stringify(userData));
      if (token) {
        localStorage.setItem('baconfort-token', token);
      }
      console.log('üíæ AUTH EMERGENCY: Sesi√≥n guardada en localStorage');
    } catch (error) {
      console.error('‚ùå AUTH EMERGENCY: Error guardando sesi√≥n:', error);
    }
  };

  // Funci√≥n para limpiar sesi√≥n
  const clearSession = () => {
    localStorage.removeItem('baconfort-user');
    localStorage.removeItem('baconfort-token');
    console.log('üóëÔ∏è AUTH EMERGENCY: Sesi√≥n eliminada del localStorage');
  };

  // LOGIN CON RESPALDO DE EMERGENCIA
  const login = async (email, password) => {
    console.log('üîê AUTH EMERGENCY: Intento de login:', email);
    setLoading(true);
    
    try {
      // INTENTAR BACKEND PRIMERO
      const response = await api.post('/auth/login', { email, password });
      
      if (response.success) {
        const authenticatedUser = {
          id: response.user.id,
          email: response.user.email,
          name: response.user.name,
          role: response.user.role,
          phone: response.user.phone,
          emailVerified: response.user.emailVerified,
          createdAt: response.user.createdAt
        };
        
        setUser(authenticatedUser);
        persistSession(authenticatedUser, response.token);
        
        console.log('‚úÖ AUTH EMERGENCY: Login exitoso via backend:', response.user.role);
        return { success: true, user: authenticatedUser };
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è AUTH EMERGENCY: Backend no disponible, usando modo emergencia');
      
      // MODO EMERGENCIA - VERIFICACI√ìN OFFLINE PARA ADMIN
      if (email === 'baconfort.centro@gmail.com' && password === 'Masajista41') {
        const emergencyAdmin = {
          id: 'emergency-admin',
          email: 'baconfort.centro@gmail.com',
          name: 'Administrador de Emergencia',
          role: 'admin',
          phone: '+54 11 1234-5678',
          emailVerified: true,
          createdAt: new Date().toISOString(),
          isEmergencyMode: true
        };
        
        setUser(emergencyAdmin);
        persistSession(emergencyAdmin, 'emergency-token-2024');
        
        console.log('üö® AUTH EMERGENCY: Acceso administrativo de emergencia activado');
        return { 
          success: true, 
          user: emergencyAdmin,
          emergencyMode: true,
          message: 'Acceso de emergencia activado. El backend ser√° restaurado pronto.'
        };
      }
      
      console.error('‚ùå AUTH EMERGENCY: Credenciales inv√°lidas en modo emergencia');
      return { 
        success: false, 
        error: 'Credenciales inv√°lidas. En modo emergencia solo funciona el usuario administrador.',
        emergencyMode: true
      };
    } finally {
      setLoading(false);
    }
  };

  const register = async (userData) => {
    console.log('üìù AUTH EMERGENCY: Registro no disponible en modo emergencia');
    setLoading(true);
    
    try {
      // Intentar registro normal
      const response = await api.post('/auth/register', userData);
      
      if (response.success) {
        console.log('‚úÖ AUTH EMERGENCY: Registro exitoso via backend');
        return { 
          success: true, 
          message: 'Usuario registrado exitosamente. Verifica tu email para continuar.',
          needsEmailVerification: true 
        };
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è AUTH EMERGENCY: Registro no disponible - backend offline');
      return { 
        success: false, 
        error: 'El registro no est√° disponible temporalmente. El backend est√° siendo restaurado.',
        emergencyMode: true,
        suggestion: 'Intenta nuevamente en unos minutos.'
      };
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    console.log('üëã AUTH EMERGENCY: Cerrando sesi√≥n');
    setUser(null);
    clearSession();
  };

  const resetPassword = async (email) => {
    console.log('üîë AUTH EMERGENCY: Solicitud de reset de contrase√±a:', email);
    
    try {
      const response = await api.post('/auth/forgot-password', { email });
      
      if (response.success) {
        return { success: true, message: response.message };
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è AUTH EMERGENCY: Reset password no disponible - backend offline');
      return { 
        success: false, 
        error: 'El reset de contrase√±a no est√° disponible temporalmente.',
        emergencyMode: true
      };
    }
  };

  const verifyEmail = async (token) => {
    console.log('üìß AUTH EMERGENCY: Verificaci√≥n de email:', token);
    
    try {
      const response = await api.post('/auth/verify-email', { token });
      
      if (response.success) {
        return { success: true, message: response.message };
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è AUTH EMERGENCY: Verificaci√≥n no disponible - backend offline');
      return { 
        success: false, 
        error: 'La verificaci√≥n de email no est√° disponible temporalmente.',
        emergencyMode: true
      };
    }
  };

  const updateProfile = async (profileData) => {
    console.log('üë§ AUTH EMERGENCY: Actualizaci√≥n de perfil no disponible');
    return { 
      success: false, 
      error: 'La actualizaci√≥n de perfil no est√° disponible en modo emergencia.',
      emergencyMode: true
    };
  };

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    resetPassword,
    verifyEmail,
    updateProfile,
    isAuthenticated: !!user,
    isAdmin: user?.role === 'admin',
    isEmergencyMode: user?.isEmergencyMode || false
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
